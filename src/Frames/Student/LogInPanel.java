/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Frames.Student;

import DatabaseConenctor.Appointment;
import Frames.*;
import DatabaseConenctor.Student;
import DatabaseConenctor.StudentAccount;
import ProjectUtilities.DataPollerThread;
import ProjectUtilities.Utils;
import java.awt.Color;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.JOptionPane;

/**
 *
 * @author netha
 */
public class LogInPanel extends javax.swing.JPanel {

    @PersistenceContext
    private EntityManager entityManager;
    @PersistenceContext
    private EntityManagerFactory entityManagerFactory;
    
    private boolean isUsernameEmpty;
    private boolean isPasswordEmpty;
    private StudentAccount result;
    private StudentMainFrame parentFrame;
    
    public LogInPanel(StudentMainFrame parentFrame) {
        this.entityManagerFactory = Persistence.createEntityManagerFactory("School_ClinicPU");
        this.entityManager = this.entityManagerFactory.createEntityManager();
        this.isUsernameEmpty = true;
        this.isPasswordEmpty = true;
        this.parentFrame = parentFrame;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameTF = new javax.swing.JTextField();
        userType = new javax.swing.JLabel();
        requestAppointmentBTN = new javax.swing.JButton();
        logInBTN = new javax.swing.JButton();

        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Student ID");
        add(jLabel1);
        jLabel1.setBounds(0, 290, 1010, 20);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome");
        add(jLabel2);
        jLabel2.setBounds(0, 130, 1010, 80);

        usernameTF.setForeground(new java.awt.Color(51, 51, 51));
        usernameTF.setText("Student ID");
        usernameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameTFFocusLost(evt);
            }
        });
        add(usernameTF);
        usernameTF.setBounds(390, 310, 230, 30);

        userType.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        userType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userType.setText("Student");
        add(userType);
        userType.setBounds(0, 190, 1010, 80);

        requestAppointmentBTN.setText("Request Appointment");
        requestAppointmentBTN.setEnabled(false);
        requestAppointmentBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestAppointmentBTNActionPerformed(evt);
            }
        });
        add(requestAppointmentBTN);
        requestAppointmentBTN.setBounds(430, 390, 150, 30);

        logInBTN.setText("LogIn");
        logInBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInBTNActionPerformed(evt);
            }
        });
        add(logInBTN);
        logInBTN.setBounds(430, 350, 150, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void requestAppointmentBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestAppointmentBTNActionPerformed
        TypedQuery<Appointment> pending = this.entityManager.createQuery("SELECT a FROM Appointment a WHERE a.status = 'pending' AND a.studentID = :studentID", Appointment.class);
        pending.setParameter("studentID", this.parentFrame.getStudent());
        
        if (!pending.getResultList().isEmpty()) {
            JOptionPane.showMessageDialog(this.parentFrame, "Request already in pending...", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Appointment newAppointment = new Appointment();
        newAppointment.setStudentID(this.parentFrame.getStudent());
        newAppointment.setStatus("pending");

        this.entityManager.getTransaction().begin();
        this.entityManager.persist(newAppointment);
        this.entityManager.getTransaction().commit();      
        
    }//GEN-LAST:event_requestAppointmentBTNActionPerformed

    private void usernameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameTFFocusLost
        // TODO add your handling code here:
        if (this.usernameTF.getText().isEmpty()) {
            this.usernameTF.setText("Username");
            this.usernameTF.setForeground(Color.GRAY);
            this.isUsernameEmpty = true;
        }
    }//GEN-LAST:event_usernameTFFocusLost

    private void usernameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameTFFocusGained
        // TODO add your handling code here:
        if (this.isUsernameEmpty) {
            this.usernameTF.setText("");
            this.usernameTF.setForeground(Color.BLACK);
            this.isUsernameEmpty = false;
        }
    }//GEN-LAST:event_usernameTFFocusGained

    private void logInBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInBTNActionPerformed
        // TODO add your handling code here:
        try {
            String username = this.usernameTF.getText();

            TypedQuery<Student> getStudentQuery = this.entityManager.createNamedQuery(
                "Student.findByStudentID",
                Student.class
            );
            
            getStudentQuery.setParameter("studentID", username);
            Student student = getStudentQuery.getSingleResult();
            this.parentFrame.setStudent(getStudentQuery.getSingleResult());
            this.requestAppointmentBTN.setEnabled(true);
            startPolling();
            
            System.out.println("Login successful for: " + student.getStudentID());
        } catch (NoResultException e) {
            JOptionPane.showMessageDialog(this.parentFrame, "Invalid username or password.", "Invalid", JOptionPane.ERROR_MESSAGE);
        } catch (NonUniqueResultException e) {
            JOptionPane.showMessageDialog(this.parentFrame, "Multiple users found with same credentials. Please contact admin.", "Invalid", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.parentFrame, "An unexpected error occurred: " + e.getMessage(), "Invalid", JOptionPane.INFORMATION_MESSAGE);
            e.printStackTrace();
        }        
    }//GEN-LAST:event_logInBTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton logInBTN;
    private javax.swing.JButton requestAppointmentBTN;
    private javax.swing.JLabel userType;
    private javax.swing.JTextField usernameTF;
    // End of variables declaration//GEN-END:variables

    private void startPolling() {
        new DataPollerThread<>(
            this::fetchAccepted,
            this::notifyStudent,
            3
        ).start();
        
        new DataPollerThread<>(
            this::fetchRescheduled,
            this::notifyStudent,
            3
        ).start();
        
        new DataPollerThread<>(
            this::fetchDeclined,
            this::notifyStudent,
            3
        ).start();
    }
    
    private List<Appointment> fetchAccepted() {
        TypedQuery<Appointment> accepted = this.entityManager.createQuery("SELECT a FROM Appointment a WHERE a.status = 'accepted' AND a.notified = 0 AND a.studentID = :studentID", Appointment.class);
        accepted.setParameter("studentID", this.parentFrame.getStudent());
        return accepted.getResultList();
    }
    
    private List<Appointment> fetchRescheduled() {
        TypedQuery<Appointment> accepted = this.entityManager.createQuery("SELECT a FROM Appointment a WHERE a.status = 'rescheduled' AND a.notified = 0 AND a.studentID = :studentID", Appointment.class);
        accepted.setParameter("studentID", this.parentFrame.getStudent());
        return accepted.getResultList();
    }
    
    private List<Appointment> fetchDeclined() {
        TypedQuery<Appointment> accepted = this.entityManager.createQuery("SELECT a FROM Appointment a WHERE a.status = 'declined' AND a.notified = 0 AND a.studentID = :studentID", Appointment.class);
        accepted.setParameter("studentID", this.parentFrame.getStudent());
        return accepted.getResultList();
    }
    
    private void notifyStudent(List<Appointment> appointments) {
        this.entityManager.getTransaction().begin();
        for (Appointment appointment : appointments) {
            this.entityManager.refresh(appointment);
            System.out.println(appointment.getStatus());
            switch (appointment.getStatus()) {
                case "accepted":
                    LocalDate createdDate = appointment.getConfirmDate()
                        .toInstant()
                        .atZone(ZoneId.systemDefault())
                        .toLocalDate();
                    JOptionPane.showMessageDialog(this.parentFrame, "You are scheduled at " + Utils.defaultDateFormat.format(createdDate), "Notification", JOptionPane.INFORMATION_MESSAGE);
                    appointment.setNotified((short) 1);
                    break;
                case "rescheduled":
                    LocalDate reschedDate = appointment.getRescheduleDate()
                        .toInstant()
                        .atZone(ZoneId.systemDefault())
                        .toLocalDate();
                    JOptionPane.showMessageDialog(this.parentFrame, "You have been rescheduled at " + Utils.defaultDateFormat.format(reschedDate), "Notification", JOptionPane.INFORMATION_MESSAGE);
                    appointment.setNotified((short) 1);
                    break;
                case "declined":
                    JOptionPane.showMessageDialog(this.parentFrame, "Sorry, Your appointment was Declined.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                    appointment.setNotified((short) 1);
                    break;
            }

        }
        this.entityManager.getTransaction().commit();   
    }
}
